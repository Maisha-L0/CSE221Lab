#A-traverse-1:
def BFSTraverse(N,E,s=1):
    Gadj=[]
    for i in range(N+1):
        Gadj.append([])    
    for j,k in E:
            Gadj[j].append(k)
            Gadj[k].append(j)
    for u in range(1,N+1):  
        Gadj[u].sort() 
    from collections import deque
    Q=deque()
    color=[0]*(N+1)
    res=[]
    color[s]=1
    Q.append(s)
    while Q:
        u = Q.popleft()
        res.append(u)
        for v in Gadj[u]:
            if color[v]==0:
                color[v]=1
                Q.append(v)
    return res
N,M=map(int,input().split(" "))
E=[]
for i in range(M):
    u,v=map(int,input().split(" "))
    E.append((u,v))
print(" ".join(map(str, BFSTraverse(N,E))))

#B-traverse-2:
import sys
sys.setrecursionlimit(2*100000+5)
def DFSTraverse(G,N):
    color=[0]*(N+1)
    res=[]
    def DFSVisit(u):
        color[u]=1
        res.append(u)
        for v in G[u]:
            if color[v]==0:
                DFSVisit(v)
            color[u]=2
    for u in range(1,N+1):
        if color[u]==0:
            DFSVisit(u)
    return res
def result(N,M,arr1,arr2):
    Gadj=[]
    for i in range(N+1):
        Gadj.append([])
    for j in range(M):
        Gadj[arr1[j]].append(arr2[j])
        Gadj[arr2[j]].append(arr1[j])
    res=DFSTraverse(Gadj,N)
    print(' '.join(map(str,res)))
N,M=map(int,input().split(" "))
arr1=list(map(int,input().split(" ")))
arr2=list(map(int,input().split(" ")))
result(N,M,arr1,arr2)

#C-lightning McQeen:
from collections import deque
def shortpath(N,M,S,D,arr1,arr2):
    Gadj=[]
    for i in range(N+1):
        Gadj.append([])
    if M>0:
        for j in range(M):
            L1=arr1[j]
            L2=arr2[j]
            Gadj[L1].append(L2)
            Gadj[L2].append(L1)
    for sorted in Gadj:
        sorted.sort()
    if S==D:
        print("0")
        print(S)
        return
    color=[0]*(N+1)
    par=[-1]*(N+1)
    dist=[-1]*(N+1)
    Q=deque()
    color[S]=1
    dist[S]=0
    Q.append(S)
    while Q:
        u=Q.popleft()
        for v in Gadj[u]:
            if color[v]==0:
                color[v]=1
                dist[v]=dist[u]+1
                par[v]=u
                Q.append(v)
    if dist[D]==-1:
        print("-1")
        return
    else:
        print(dist[D])
        path=[]
        curr=D
        while curr!=-1:
            path.append(curr)
            curr=par[curr]
    for g in range(len(path)-1,-1,-1):
            print(path[g],end=' ')
    print()
N,M,S,D=map(int,input().split(' '))
arr1=input()
arr2=input()
if M>0:
    arr1=list(map(int,arr1.split(' ')))
    arr2=list(map(int,arr2.split(' ')))
else:
    arr1=[]
    arr2=[]
shortpath(N,M,S,D,arr1,arr2)

#D-through the jungle:
from collections import deque, defaultdict
import sys
input = sys.stdin.read
def bfs(start, target, graph, N):
    dist = [-1] * (N + 1)
    parent = [-1] * (N + 1)
    q = deque()
    q.append(start)
    dist[start] = 0
    while q:
        u = q.popleft()
        if u == target:
            break
        for v in graph[u]:
            if dist[v] == -1:
                dist[v] = dist[u] + 1
                parent[v] = u
                q.append(v)
    if dist[target] == -1:
        return None
    path = []
    cur = target
    while cur != -1:
        path.append(cur)
        cur = parent[cur]
    path.reverse()
    return path
def solve():
    data = input().split()
    N, M, S, D, K = map(int, data[:5])
    edges = data[5:]
    graph = [[] for _ in range(N + 1)]
    for i in range(0, 2 * M, 2):
        u, v = int(edges[i]), int(edges[i + 1])
        graph[u].append(v)
    if S == D == K:
        print(0)
        print(K)
        return
    path1 = bfs(S, K, graph, N)
    path2 = bfs(K, D, graph, N)
    if not path1 or not path2:
        print(-1)
        return
    final_path = path1 + path2[1:]
    print(len(final_path) - 1)
    print(' '.join(map(str, final_path)))
solve()

#E-Cycle detection:
import sys
sys.setrecursionlimit(1 << 25)
def input():
    return sys.stdin.readline()
def dfs(u):
    visited[u] = 1  
    for v in graph[u]:
        if visited[v] == 0:
            if dfs(v):
                return True
        elif visited[v] == 1:
            return True  
    visited[u] = 2  
    return False
def solve():
    N, M = map(int, sys.stdin.readline().split())
    global graph, visited
    graph = [[] for _ in range(N + 1)]
    visited = [0] * (N + 1)
    for _ in range(M):
        u, v = map(int, sys.stdin.readline().split())
        graph[u].append(v)
    for i in range(1, N + 1):
        if visited[i] == 0:
            if dfs(i):
                print("YES")
                return
    print("NO")
solve()

#F-diamonds under W:
from collections import deque
def in_bounds(x, y, R, H):
    return 0 <= x < R and 0 <= y < H
def solve():
    R, H = map(int, input().split())
    grid = [list(input().strip()) for i in range(R)]
    visited = [[False] * H for j in range(R)]
    max_diamonds = 0
    directions = [(-1,0), (1,0), (0,-1), (0,1)]  
    for i in range(R):
        for j in range(H):
            if not visited[i][j] and grid[i][j] != '#':
                queue = deque([(i, j)])
                visited[i][j] = True
                diamond_count = 0
                if grid[i][j] == 'D':
                    diamond_count += 1
                while queue:
                    x, y = queue.popleft()
                    for dx, dy in directions:
                        nx, ny = x + dx, y + dy
                        if in_bounds(nx, ny, R, H) and not visited[nx][ny] and grid[nx][ny] != '#':
                            visited[nx][ny] = True
                            if grid[nx][ny] == 'D':
                                diamond_count += 1
                            queue.append((nx, ny))
                max_diamonds = max(max_diamonds, diamond_count)
    print(max_diamonds)
solve()
