#A-adj matrix:
N,M=list(map(int,input().split(' ')))
matrix=[]
for i in range(N):
    l1=[]
    for j in range(N):
        l1.append(0)
    matrix.append(l1)
for p in range(M):
    s,d,w=list(map(int,input().split(' ')))
    matrix[s-1][d-1]=w
for q in matrix:
    for r in q:
        print(r,end=' ')
    print()

#B-adj list:
N,M=list(map(int,input().split(' ')))
s=list(map(int,input().split(' ')))
d=list(map(int,input().split(' ')))
w=list(map(int,input().split(' ')))
dict1={}
for i in range(M):
    if s[i] not in dict1:
        dict1[s[i]]=[]
    dict1[s[i]].append((d[i],w[i]))
for j in range(1,N+1):
    a=f"{j}:"
    if j in dict1:
        for p,q in dict1[j]:
            a+=f"({p},{q})"
    print(a)

#C-graph metamorphosis:
N=int(input())
matrix=[]
for i in range(N):
    l1=[]
    for j in range(N):
        l1.append(0)
    matrix.append(l1)
for j in range(N):
    list1=list(map(int,input().split(' ')))
    MNode=list1[0]
    adjN=list1[1:]
    for k in adjN:
        matrix[j][k]=1
for q in matrix:
    for r in q:
        print(r,end=' ')
    print()

#D-The Seven Bridges of KÃ¶nigsberg:
N,M=list(map(int,input().split(' ')))
if M==0:
    print("YES")
else:   
    s=list(map(int,input().split(' ')))
    d=list(map(int,input().split(' ')))
    deg=[0]*(N+1)
    for i in range(M):
        deg[s[i]]+=1
        deg[d[i]]+=1
    count=0
    for j in range(1,N+1):
        if deg[j]%2==1:
            count+=1
    if count==2 or count==0:
        print("YES")
    else:
        print("NO")

#E-edge queries:
N,M=list(map(int,input().split(' ')))
indeg=[0]*(N+1)
outdeg=[0]*(N+1)
if M>0:
    s=list(map(int,input().split(' ')))
    d=list(map(int,input().split(' ')))
    
    for i in range(M):
        outdeg[s[i]]+=1
        indeg[d[i]]+=1
list1=[]
for j in range(1,N+1):
    diff=indeg[j]-outdeg[j]
    list1.append(diff)
print(' '.join(map(str,list1)))

