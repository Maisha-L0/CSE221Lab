#A-count inversion:
n=int(input())
arr=input()
A=list(map(int,arr.split(' ')))
def merge(a1,a2,inv):
    i=j=0
    sorted=[]
    while i<len(a1) and j<len(a2):
        if a1[i]<a2[j]:
            sorted.append(a1[i])
            i+=1
        else:
            inv+= len(a1)-i
            sorted.append(a2[j])
            j+=1
    while i<len(a1):
        sorted.append(a1[i])
        i+=1
    while j<len(a2):
        sorted.append(a2[j])
        j+=1
    return sorted, inv
def mergeSort(arr,inv):
    if len(arr) <= 1:
        return arr, inv
    else:
        mid = len(arr)//2
        a1,inv1= mergeSort(arr[:mid],inv)
        a2,inv2= mergeSort(arr[mid:],inv)
        merged,invs=merge(a1, a2, inv)
        return merged, inv1+inv2+invs
i=0
arr,invs=mergeSort(A,i)
print(invs)
print(" ".join(map(str,arr)))

#B-pair maximization:
n=int(input())
arr=input()
A=list(map(int,arr.split(' ')))
def Emax(arr,mid):
    i=mid-1
    j=mid
    max_i=float('-inf')
    max_j=float('-inf')
    while i>=0:
        max_i=max(max_i,arr[i])
        i-=1
    while j<len(arr):
        max_j=max(max_j,abs(arr[j]))
        j+=1
    RES=max_i+(max_j)**2
    return RES
def Emaxes(arr,m):
    if m==2:
        res=arr[0]+(arr[1])**2
        return res
    if m==1:
        x= float('-inf')
        return x
    mid=m//2
    left=Emaxes(arr[:mid],mid)
    right=Emaxes(arr[mid:],m-mid)
    emax=Emax(arr,mid)
    return max(left,right,emax)
print(Emaxes(A,n))

#C-fast MOD drift:
A=input()
a,b=list(map(int,A.split(' ')))
def value(a,b):
    if b==0:
        return 1
    n=b//2
    div=(value(a,n))%107
    con=(div*div)%107
    if b%2==1:
        con=(con*a)%107
    return con
print(value(a,b))

#D-fast MOD drift revisited:
def fast_mod_sum(a, n, m):
    seen = {}
    seq = []
    total = 0
    i = 1
    while True:
        val = pow(a, i, m)
        if val in seen:
            # cycle detected
            cycle_start = seen[val]
            break
        seen[val] = len(seq)
        seq.append(val)
        i += 1
    pre_cycle = seq[:cycle_start]
    cycle = seq[cycle_start:]
    total = 0
    n_pre = min(n, len(pre_cycle))
    for i in range(n_pre):
        total = (total + pre_cycle[i]) % m
    n_left = n - n_pre
    if n_left > 0:
        cycle_len = len(cycle)
        cycle_sum = sum(cycle) % m
        full_cycles = n_left // cycle_len
        total = (total + full_cycles * cycle_sum) % m
        rem = n_left % cycle_len
        for i in range(rem):
            total = (total + cycle[i]) % m
    return total
import sys
input = sys.stdin.readline
T = int(input())
results = []
for i in range(T):
    a, n, m = map(int, input().split())
    results.append(fast_mod_sum(a, n, m))
print("\n".join(map(str, results)))

#ordering binary tree:
A=int(input())
T=input()
tr=list(map(int,T.split(' ')))
def balancedTree(tr):
    arr=[]
    if tr==[]:
        return arr
    if len(tr)>0:
        mid=len(tr)//2
        arr.append(tr[mid])
        left=balancedTree(tr[:mid])
        right=balancedTree(tr[mid+1:])
        return arr+left+right
    else:
        return []
result=balancedTree(tr)
print(" ".join(map(str,result)))

#F-220 trees:
def build_post_order(in_order, pre_order):
    idx_map = {val: idx for idx, val in enumerate(in_order)}
    n = len(pre_order)
    def helper(in_left, in_right, pre_index):
        if in_left > in_right:
            return [], pre_index
        root_val = pre_order[pre_index]
        root_index = idx_map[root_val]
        left_post, next_pre_index = helper(in_left, root_index - 1, pre_index + 1)
        right_post, next_pre_index = helper(root_index + 1, in_right, next_pre_index)
        return left_post + right_post + [root_val], next_pre_index
    post_order, _ = helper(0, n - 1, 0)
    return post_order
n = int(input())
in_order = list(map(int, input().split()))
pre_order = list(map(int, input().split()))
post_order = build_post_order(in_order, pre_order)
print(' '.join(map(str, post_order)))
